diff --git a/lib/Exception/NoException.pm b/lib/Exception/NoException.pm
index dd66efb..39a4f48 100644
--- a/lib/Exception/NoException.pm
+++ b/lib/Exception/NoException.pm
@@ -1,26 +1,72 @@
 package Exception::NoException;
-
 use strict;
+use warnings;
+our $VERSION = '0.07';
 
-require Exception::NoException::_obj;
+use UNIVERSAL::ref;
+sub ref {''}
 
 sub new {
-    my $class = shift @_;
-    $class .= '::_obj';
     my $obj;
-
-    return bless \$obj, $class;
+    return bless \$obj, $_[0];
 }
 
-sub get_no_exception {
-    my $class = shift @_;
-    $class .= '::_obj';
+use overload
+    'fallback' => undef,
+    '=' => sub { '' },
+
+    '+' => sub { $_[2] ? ($_[1] + 0) : (0 + $_[0]) },
+    '-' => sub { $_[2] ? ($_[1] - 0) : (0 - $_[0]) },
+    '*' => sub { $_[2] ? ($_[1] * 0) : (0 * $_[0]) },
+    '/' => sub { $_[2] ? ($_[1] / 0) : (0 / $_[0]) },
+    '%' => sub { $_[2] ? ($_[1] % 0) : (0 % $_[0]) },
+    '**' => sub { $_[2] ? ($_[1] ** 0) : (0 ** $_[0]) },
+    '<<' => sub { $_[2] ? ($_[1] << 0) : (0 << $_[0]) },
+    '>>' => sub { $_[2] ? ($_[1] >> 0) : (0 >> $_[0]) },
+    'x' => sub { $_[2] ? ($_[1] x 0) : (0 x $_[0]) },
+    '.' => sub { $_[2] ? ($_[1] . 0) : (0 . $_[0]) },
+    '<=>' => sub { $_[2] ? ($_[1] <=> 0) : (0 <=> $_[0]) },
+    'cmp' => sub { $_[2] ? ($_[1] cmp 0) : (0 cmp $_[0]) },
+    '&' => sub { $_[2] ? ($_[1] & 0) : (0 & $_[0]) },
+    '^' => sub { $_[2] ? ($_[1] ^ 0) : (0 ^ $_[0]) },
+    '|' => sub { $_[2] ? ($_[1] | 0) : (0 | $_[0]) },
+    '~' => sub { ~ '' },
+    'atan2' => sub { $_[2] ? atan2( $_[1], $_[0] ) : atan2( $_[0], $_[1] ) },
+    'cos'   => sub { 1 },
+    'sin'   => sub { 0 },
+    'exp'   => sub { 1 },
+    'abs'   => sub { 0 },
+    'sqrt'  => sub { 0 },
+    'int'   => sub { 0 },
+
+    # Autogenerated:
+    # += -= *= /= %= **= <<= >>= x= .=
+    # < <= > >= == != lt le gt ge eq ne
+    # &= ^= |= neg !
+    # ++ --
+    # <>
+
+    # Conversion
+    '""'   => sub { '' },
+    'bool' => sub { !1 },
+    '0+'   => sub { 0 },
+    'qr'   => sub { qr// },
+
+    # Matching
+    (
+        $] >= 5.010
+        ? ( '~~' => sub { '' } )
+        : ()
+    ),
+
+    # Dereferencing
+    '${}' => sub { '' },
+    '@{}' => sub { '' },
+    '%{}' => sub { '' },
+    '&{}' => sub { '' },
+    '*{}' => sub { '' },
+;
 
-    return $class->can('_no_exception');
-}
-
-## no critic EndWithOne
-# Quote blatantly copied from Michael Poe's errantstory.com
 'The Adventures Of Kung-Fu Jesus and His Amazing Giant Robot';
 
 __END__
@@ -54,16 +95,15 @@ there's a problem, you won't find any.
 
 =over
 
-=item C<< Exception::NoException->new >>
+=item Exception::NoException-E<gt>new
 
-This method takes no arguments and returns a new C<<
-Exception::NoException::_obj >> object. This object overloads all
-available operators. Whenever an overloaded function is used a false
-value is returned and $@ is cleared.
+This method takes no arguments and returns a object. This object
+overloads all available operators. Whenever an overloaded function is
+used a false value is returned and $@ is cleared.
 
-=item C<< Exception::NoException->get_no_exception >>
+=item $obj-E<gt>ref
 
-XXX Docs go here.
+Returns '' as if this wasn't actually an object.
 
 =back
 
diff --git a/lib/Exception/NoException/_obj.pm b/lib/Exception/NoException/_obj.pm
index 25271cf..aa07f80 100644
--- a/lib/Exception/NoException/_obj.pm
+++ b/lib/Exception/NoException/_obj.pm
@@ -1,43 +1,5 @@
-## no critic Warnings
-# $Id: /src/Exception-NoException/trunk/lib/Exception/NoException/_obj.pm 166 2006-08-16T21:22:18.048528Z josh  $
-
 package Exception::NoException::_obj;
-use strict;
-use vars '$VERSION';    ## no critic Interpolation
-$VERSION = '0.01';
-
-# Provide ->get_no_exception
-use Exception::NoException;
-
-# Pretend to be an empty scalar.
-use UNIVERSAL::ref;
-sub ref {''}
-
-#use UNIVERSAL::ref;
-#sub ref {''}
-
-# Compile it and load %overload::ops
-use overload ();
-
-# Overload all operations
-my %h =
-    map { $_ => Exception::NoException->get_no_exception }
-    map { split ' ' }    ## no critic EmptyQuotes
-    values %overload::ops    ## no critic PackageVars
-    ;
-
-#use Data::Dumper;
-#print Dumper( \%h );
-overload->import(%h);
-
-*AUTOLOAD = Exception::NoException->get_no_exception;
-
-sub _no_exception {
-    return '';
-}
 
-## no critic EndWithOne
-# Quote blatantly copied form Michael Poe's errantstory.com
 q[ Hey, what does this switch labeled 'Pulsating Ejector' do?
 
    I don't know... I've always been too afraid to find out ];
diff --git a/t/20basic.t b/t/20basic.t
index 7d152a8..ad01e54 100644
--- a/t/20basic.t
+++ b/t/20basic.t
@@ -1,6 +1,6 @@
 #!perl
 # $Id: /src/Exception-NoException/trunk/t/20basic.t 168 2006-08-16T21:29:24.508066Z josh  $
-use Test::More tests => 3;
+use Test::More tests => 5;
 use Exception::NoException;
 
 my $did_not_die = '';
@@ -8,9 +8,20 @@ eval {
     die Exception::NoException->new;
     $did_not_die = 1;
 };
-
 my $e = $@;
 
-is( $e,           '', "No exception" );
-is( ref($e),      '', 'No exception' );
 is( $did_not_die, '', 'Died' );
+
+# Conversion overloading
+is( $e,           '', "Stringifies as ''" );
+cmp_ok( $e, '==', 0, 'Numifies as 0' );
+my $is_false;
+if ($e) {
+    $is_false = 0;
+}
+else {
+    $is_false = 1;
+}
+ok( $is_false, 'Boolifies as false' );
+
+is( ref($e),      '', 'No exception' );
